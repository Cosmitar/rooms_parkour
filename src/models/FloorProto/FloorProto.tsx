/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import { useMemo, useContext, createContext } from 'react'
import { useGLTF, Merged } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { CuboidCollider, RigidBody } from '@react-three/rapier'

type GLTFResult = GLTF & {
  nodes: {
    Floor_Prototype: THREE.Mesh
  }
  materials: {
    prototype_texture: THREE.MeshStandardMaterial
  }
}

const context = createContext<Record<string, any>>({})
export function FloorProtoInstances({ children, ...props }: JSX.IntrinsicElements['group']) {
  const { nodes } = useGLTF('/assets/items/gltf/Floor_Prototype.gltf') as GLTFResult
  const instances = useMemo(
    () => ({
      Floor_Prototype: nodes.Floor_Prototype,
    }),
    [nodes]
  )
  return (
    <Merged meshes={instances} {...props}>
      {(instances: any) => <context.Provider value={instances} children={children} />}
    </Merged>
  )
}

export function FloorProtoModel(props: JSX.IntrinsicElements['group']) {
  const instances = useContext(context)
  const collPosition = [...((props.position as [x: number, y: number, z: number]) ?? [0, 0, 0])] as [x: number, y: number, z: number]
  const collRotation = [...((props.rotation as [x: number, y: number, z: number]) ?? [0, 0, 0])] as [x: number, y: number, z: number]
  
  return (
    <RigidBody type='fixed'>
      <group {...props} dispose={null}>
        <instances.Floor_Prototype name='Floor_Prototype' />
      </group>
      <CuboidCollider args={[2, 0.5, 2]} position={collPosition} rotation={collRotation} scale={props.scale} />
    </RigidBody>
  )
}

useGLTF.preload('/assets/items/gltf/Floor_Prototype.gltf')
